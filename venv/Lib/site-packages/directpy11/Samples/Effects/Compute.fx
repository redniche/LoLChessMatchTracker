
//Simple compute shader example.

cbuffer vars
{
    //If you have CS 5.0 capable GPU, you could read buffer's
    //size in the shader by using XXXBuffer.GetDimensions()
    int bufferSize = 0;
}

struct BufType {
    int i;
};

//Two input buffers
StructuredBuffer<BufType> buffer1; 
StructuredBuffer<BufType> buffer2;
//One output buffer.
RWStructuredBuffer<BufType> bufferOut; 


[numthreads(1, 1, 1)]
void CSAdd(uint3 DTid : SV_DispatchThreadID)
{
    //Pretty useless operation which
    //just sums integers together. 

    int sum = 0;
    for (int i=0; i < bufferSize; ++i) {
        sum += buffer1[DTid.x].i + buffer2[i].i;
        for (int i2=0; i2 < bufferSize; ++i2) {
            sum += buffer2[i2].i;
        }
    }
    //Write result to ouput buffer.
    bufferOut[DTid.x].i = sum + DTid.x;
}

technique11 ComputeTech
{
    pass PassAdd 
    {
        SetComputeShader(CompileShader(cs_4_0, CSAdd()));
    }
}


// Use below instead if are playing with raw buffer type
//ByteAddressBuffer buffer0 : register(t0);
//ByteAddressBuffer buffer1 : register(t1);
//RWByteAddressBuffer bufferOut : register(u0);
//
//[numthreads(1, 1, 1)]
//void CSMain( uint3 DTid : SV_DispatchThreadID )
//{
//    int i0 = asint( buffer0.Load( DTid.x*8 ) );
//    float f0 = asfloat( buffer0.Load( DTid.x*8+4 ) );
//    int i1 = asint( buffer1.Load( DTid.x*8 ) );
//    float f1 = asfloat( buffer1.Load( DTid.x*8+4 ) );
//
//    bufferOut.Store( DTid.x*8, asuint(i0 + i1) );
//    bufferOut.Store( DTid.x*8+4, asuint(f0 + f1) );
//}
